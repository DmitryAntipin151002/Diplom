// components/EventForm.jsx
import React, { useState } from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { eventAPI } from '../services/eventService';
import '../styles/EventForm.css';

const EventForm = ({ onSuccess, initialData, onCancel }) => {
    const [formData, setFormData] = useState(initialData || {
        title: '',
        description: '',
        sportType: 'FOOTBALL',
        startTime: new Date(),
        endTime: new Date(),
        location: '',
        statusCode: 'PLANNED'
    });

    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const sportTypes = [
        { value: 'FOOTBALL', label: '‚öΩ –§—É—Ç–±–æ–ª' },
        { value: 'BASKETBALL', label: 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª' },
        { value: 'VOLLEYBALL', label: 'üèê –í–æ–ª–µ–π–±–æ–ª' },
        { value: 'TENNIS', label: 'üéæ –¢–µ–Ω–Ω–∏—Å' }
    ];

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError(null);

        try {
            const organizerId = localStorage.getItem('userId');
            let response;

            if (initialData) {
                response = await eventAPI.updateEvent(initialData.id, formData);
            } else {
                response = await eventAPI.createEvent(organizerId, formData);
            }

            onSuccess(response.data);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
        } finally {
            setLoading(false);
        }
    };

    return (
        <form className="event-form" onSubmit={handleSubmit}>
            <h2 className="form-title">{initialData ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ'}</h2>

            {error && <div className="error-message">{error}</div>}

            <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</label>
                <input
                    type="text"
                    value={formData.title}
                    onChange={(e) => setFormData({...formData, title: e.target.value})}
                    required
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
                />
            </div>

            <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({...formData, description: e.target.value})}
                    placeholder="–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è"
                />
            </div>

            <div className="form-row">
                <div className="form-group">
                    <label>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</label>
                    <select
                        value={formData.sportType}
                        onChange={(e) => setFormData({...formData, sportType: e.target.value})}
                    >
                        {sportTypes.map((type) => (
                            <option key={type.value} value={type.value}>
                                {type.label}
                            </option>
                        ))}
                    </select>
                </div>

                <div className="form-group">
                    <label>–°—Ç–∞—Ç—É—Å:</label>
                    <select
                        value={formData.statusCode}
                        onChange={(e) => setFormData({...formData, statusCode: e.target.value})}
                    >
                        <option value="PLANNED">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</option>
                        <option value="ONGOING">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                        <option value="COMPLETED">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                    </select>
                </div>
            </div>

            <div className="form-row">
                <div className="form-group">
                    <label>–ù–∞—á–∞–ª–æ:</label>
                    <DatePicker
                        selected={new Date(formData.startTime)}
                        onChange={(date) => setFormData({...formData, startTime: date})}
                        showTimeSelect
                        timeFormat="HH:mm"
                        timeIntervals={15}
                        dateFormat="dd.MM.yyyy HH:mm"
                        placeholderText="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"
                    />
                </div>

                <div className="form-group">
                    <label>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</label>
                    <DatePicker
                        selected={new Date(formData.endTime)}
                        onChange={(date) => setFormData({...formData, endTime: date})}
                        showTimeSelect
                        timeFormat="HH:mm"
                        timeIntervals={15}
                        dateFormat="dd.MM.yyyy HH:mm"
                        placeholderText="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"
                    />
                </div>
            </div>

            <div className="form-group">
                <label>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</label>
                <input
                    type="text"
                    value={formData.location}
                    onChange={(e) => setFormData({...formData, location: e.target.value})}
                    required
                    placeholder="–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"
                />
            </div>

            <div className="form-actions">
                <button
                    type="button"
                    className="cancel-button"
                    onClick={onCancel}
                    disabled={loading}
                >
                    –û—Ç–º–µ–Ω–∞
                </button>
                <button
                    type="submit"
                    className="submit-button"
                    disabled={loading}
                >
                    {loading ? (
                        <span className="spinner"></span>
                    ) : initialData ? (
                        '–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'
                    ) : (
                        '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'
                    )}
                </button>
            </div>
        </form>
    );
};

export default EventForm;