import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { eventAPI } from '../../services/eventService';
import EventForm from '../Event_Component/EventForm';
import './../../assets/Dashboard.css';

const MyGames = () => {
    const [events, setEvents] = useState([]);
    const [showCreateForm, setShowCreateForm] = useState(false);
    const userId = localStorage.getItem('userId');
    const navigate = useNavigate();

    useEffect(() => {
        const loadEvents = async () => {
            try {
                const response = await eventAPI.getEventsByOrganizer(userId);
                setEvents(response.data);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
            }
        };
        loadEvents();
    }, [userId]);

    const handleDelete = async (eventId) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?')) {
            try {
                await eventAPI.deleteEvent(eventId);
                setEvents(events.filter(event => event.id !== eventId));
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
            }
        }
    };

    const handleStatusChange = async (eventId, newStatus) => {
        try {
            await eventAPI.updateEventStatus(eventId, newStatus);
            setEvents(events.map(event =>
                event.id === eventId ? {...event, statusCode: newStatus} : event
            ));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        }
    };

    return (
        <div className="dashboard-container">
            {/* –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤ Dashboard */}
            <main className="main-content">
                <header className="dashboard-header">
                    {/* –•–µ–¥–µ—Ä –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π Dashboard */}
                </header>

                <section className="my-games-content">
                    <div className="section-header">
                        <h2>–ú–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã</h2>
                        <button
                            className="create-button"
                            onClick={() => setShowCreateForm(!showCreateForm)}
                        >
                            {showCreateForm ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É'}
                        </button>
                    </div>

                    {showCreateForm && (
                        <EventForm
                            onSuccess={(newEvent) => {
                                setEvents([...events, newEvent]);
                                setShowCreateForm(false);
                            }}
                        />
                    )}

                    <div className="events-list">
                        {events.map(event => (
                            <div key={event.id} className="event-card">
                                <div className="event-header">
                                    <h3>{event.title}</h3>
                                    <span className={`status-badge ${event.statusCode.toLowerCase()}`}>
                    {event.statusCode}
                  </span>
                                </div>

                                <div className="event-details">
                                    <p>üìç {event.location}</p>
                                    <p>‚è∞ {new Date(event.startTime).toLocaleString()}</p>
                                    <p>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {event.participantsCount || 0}</p>
                                </div>

                                <div className="event-actions">
                                    <select
                                        value={event.statusCode}
                                        onChange={(e) => handleStatusChange(event.id, e.target.value)}
                                        className="status-select"
                                    >
                                        <option value="PLANNED">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</option>
                                        <option value="ONGOING">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                                        <option value="COMPLETED">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                                    </select>

                                    <button
                                        className="edit-button"
                                        onClick={() => navigate(`/events/${event.id}/edit`)}
                                    >
                                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </button>

                                    <button
                                        className="delete-button"
                                        onClick={() => handleDelete(event.id)}
                                    >
                                        –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                </section>
            </main>
        </div>
    );
};

export default MyGames;